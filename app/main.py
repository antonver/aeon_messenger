from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from sqlalchemy import text
import os
import logging
import traceback

from app.config import settings
from app.database import get_db, engine
from app.models import user, chat, message
from app.api import chats, messages, admin, hr
from app.websocket import router as websocket_router
from app.auth.dependencies import get_current_user
from app.models.user import User
from app.models.chat_invitation import ChatInvitation

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG if settings.debug else logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('app.log') if not settings.debug else logging.NullHandler()
    ]
)

logger = logging.getLogger(__name__)

app = FastAPI(
    title=settings.app_name,
    description="Backend –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Aeon - Telegram Mini App",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –í–ê–ñ–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
ALLOWED_ORIGINS = [
    "https://qit-antonvers-projects.vercel.app",
    "https://aeon-messenger.vercel.app",
    "http://localhost:3000",
    "http://localhost:5173",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
    "*"  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
]

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
cors_origins_env = os.getenv("CORS_ORIGINS")
if cors_origins_env:
    env_origins = [origin.strip() for origin in cors_origins_env.split(",")]
    ALLOWED_ORIGINS.extend(env_origins)

logger.info(f"üåê CORS Origins: {ALLOWED_ORIGINS}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH", "HEAD"],
    allow_headers=["*", "x-telegram-init-data"],
    expose_headers=["*"]
)

def add_cors_headers(response, origin=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É"""
    if origin and origin in ALLOWED_ORIGINS:
        response.headers["Access-Control-Allow-Origin"] = origin
    else:
        response.headers["Access-Control-Allow-Origin"] = "*"

    response.headers["Access-Control-Allow-Credentials"] = "true"
    response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD"
    response.headers["Access-Control-Allow-Headers"] = "Accept, Accept-Language, Content-Language, Content-Type, Authorization, X-Requested-With, Origin, X-CSRF-Token, x-telegram-init-data"
    response.headers["Access-Control-Expose-Headers"] = "*"
    response.headers["Access-Control-Max-Age"] = "86400"
    return response

@app.middleware("http")
async def cors_and_error_handler(request: Request, call_next):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ CORS –∏ –æ—à–∏–±–æ–∫"""
    origin = request.headers.get('origin')
    method = request.method

    logger.info(f"üì° {method} {request.url} from {origin}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
    if method == "OPTIONS":
        response = JSONResponse(content={"status": "ok"})
        response = add_cors_headers(response, origin)
        logger.info(f"‚úÖ OPTIONS response for {origin}")
        return response

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)

        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ —É—Å–ø–µ—à–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
        response = add_cors_headers(response, origin)

        logger.info(f"‚úÖ {method} {request.url} -> {response.status_code}")
        return response

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"‚ùå Error in {method} {request.url}: {str(e)}")
        logger.error(traceback.format_exc())

        # –°–æ–∑–¥–∞–µ–º JSON –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        error_content = {
            "error": "Internal Server Error",
            "detail": str(e) if settings.debug else "An unexpected error occurred",
            "status_code": 500
        }

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å CORS –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        error_response = JSONResponse(
            status_code=500,
            content=error_content
        )
        error_response = add_cors_headers(error_response, origin)

        return error_response

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
os.makedirs(settings.upload_dir, exist_ok=True)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –º–µ–¥–∏–∞
app.mount("/media", StaticFiles(directory=settings.upload_dir), name="media")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.include_router(chats.router, prefix="/api/v1")
app.include_router(messages.router, prefix="/api/v1")
app.include_router(admin.router, prefix="/api/v1")
app.include_router(hr.router, prefix="/api/v1")
app.include_router(websocket_router.router)


@app.on_event("startup")
async def startup_event():
    """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    logger.info(f"–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {settings.debug}")
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if settings.telegram_bot_token != 'test_token' else '–ù–ï–¢ - –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –¢–ï–°–¢–û–í–´–ô!'}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    from app.database import Base
    Base.metadata.create_all(bind=engine)
    
    logger.info("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")


@app.get("/")
async def root():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
    """
    return {
        "message": "Aeon Messenger API",
        "version": "1.0.0",
        "status": "active"
    }


@app.get("/api/v1/test-cors")
async def test_cors():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
    """
    return {
        "message": "CORS test endpoint",
        "status": "success",
        "cors_enabled": True
    }


@app.options("/api/v1/test-cors")
async def test_cors_options():
    """
    OPTIONS —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    return {
        "message": "CORS preflight response",
        "status": "success"
    }


@app.get("/api/v1/me")
async def get_current_user_info(current_user: User = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    return {
        "id": current_user.id,
        "telegram_id": current_user.telegram_id,
        "username": current_user.username,
        "first_name": current_user.first_name,
        "last_name": current_user.last_name,
        "language_code": current_user.language_code,
        "is_premium": current_user.is_premium,
        "is_admin": current_user.is_admin,
        "profile_photo_url": current_user.profile_photo_url,
        "bio": current_user.bio,
        "created_at": current_user.created_at
    }


@app.get("/api/v1/health")
async def health_check(db: Session = Depends(get_db)):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.execute(text("SELECT 1"))
        db_status = "connected"
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    return {
        "status": "healthy",
        "database": db_status,
        "version": "1.0.0"
    }


@app.get("/api/v1/debug/auth")
async def debug_auth_config():
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    return {
        "telegram_bot_token_set": settings.telegram_bot_token != "test_token",
        "telegram_bot_token_length": len(settings.telegram_bot_token) if settings.telegram_bot_token else 0,
        "debug_mode": settings.debug,
        "cors_origins": getattr(settings, 'cors_origins', ["*"]),
        "app_name": settings.app_name
    }


@app.post("/api/v1/debug/validate-telegram-data")
async def debug_validate_telegram_data(init_data: str):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –¥–∞–Ω–Ω—ã—Ö
    """
    from app.auth.telegram import validate_telegram_data
    
    logger.info(f"–û—Ç–ª–∞–¥–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è: {init_data[:50]}...")
    
    result = validate_telegram_data(init_data)
    
    return {
        "success": result is not None,
        "validated_data": result,
        "telegram_bot_token_set": settings.telegram_bot_token != "test_token"
    }


@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    """
    logger.error(f"HTTP Exception: {exc.status_code} - {exc.detail}")
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    """
    logger.error(f"General Exception: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "status_code": 500
        }
    )


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug
    )
